{"ast":null,"code":"import _objectSpread from \"/Users/carlosbarrera/mod4-flatiron/mod4_project/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/carlosbarrera/mod4-flatiron/mod4_project/frontend/src/context.js\";\nimport React, { Component } from 'react';\nconst ProductContext = React.createContext();\n\nclass ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      detailProduct: 0,\n      cart: [],\n      modalOpen: false,\n      modalProduct: 0,\n      cartSubTotal: 0,\n      cartTax: 0,\n      cartTotal: 0,\n      searchTerm: ''\n    };\n    this.state = {\n      searchTerm: ''\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        searchTerm: e.target.value\n      });\n    };\n\n    this.setProducts = () => {\n      let products = [];\n      this.state.products.forEach(item => {\n        const singleItem = _objectSpread({}, item);\n\n        products = [...products, singleItem];\n      });\n      this.setState(() => {\n        return {\n          products: products\n        };\n      });\n    };\n\n    this.getItem = id => {\n      const product = this.state.products.find(item => item.id === id);\n      return product;\n    };\n\n    this.handleDetail = id => {\n      const product = this.getItem(id);\n      this.setState(() => {\n        return {\n          detailProduct: product\n        };\n      });\n    };\n\n    this.addToCart = id => {\n      let tempProducts = [...this.state.products];\n      const index = tempProducts.indexOf(this.getItem(id));\n      const product = tempProducts[index];\n      product.inCart = true;\n      product.count = 1;\n      const price = product.price;\n      product.total = price;\n      this.setState(() => {\n        return {\n          products: tempProducts,\n          cart: [...this.state.cart, product]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.openModal = id => {\n      const product = this.getItem(id);\n      this.setState(() => {\n        return {\n          modalProduct: product,\n          modalOpen: true\n        };\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState(() => {\n        return {\n          modalOpen: false\n        };\n      });\n    };\n\n    this.increment = id => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.id === id);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.count = product.count + 1;\n      product.total = product.count * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.decrement = id => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.id === id);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.count = product.count - 1;\n\n      if (product.count === 0) {\n        this.removeItem(id);\n      } else {\n        product.total = product.count * product.price;\n        this.setState(() => {\n          return {\n            cart: [...tempCart]\n          };\n        }, () => {\n          this.addTotals();\n        });\n      }\n    };\n\n    this.removeItem = id => {\n      let tempProducts = [...this.state.products];\n      let tempCart = [...this.state.cart];\n      tempCart = tempCart.filter(item => item.id !== id);\n      const index = tempProducts.indexOf(this.getItem(id));\n      let removedProduct = tempProducts[index];\n      removedProduct.inCart = false;\n      removedProduct.count = 0;\n      removedProduct.total = 0;\n      this.setState(() => {\n        return {\n          cart: [...tempCart],\n          products: [...tempProducts]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.clearCart = () => {\n      this.setState(() => {\n        return {\n          cart: []\n        };\n      }, () => {\n        this.setProducts();\n        this.addTotals();\n      });\n    };\n\n    this.createOrderedItems = () => {};\n\n    this.createOrder = (cartTotal, cart) => {\n      if (localStorage.token && localStorage.token !== \"undefined\") {\n        fetch('http://localhost:3000/orders/create', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': \"Bearer \".concat(localStorage.getItem('token'))\n          },\n          body: JSON.stringify({\n            order_total: cartTotal,\n            ordered_items: cart\n          })\n        }).then(window.location.replace('/')).then(alert(\"You placed an order!\"));\n      } else {\n        window.alert(\"Please Log In\");\n        window.location = '/login';\n      }\n    };\n\n    this.addTotals = () => {\n      let subTotal = 0;\n      this.state.cart.map(item => subTotal += item.total);\n      const tempTax = subTotal * 0.1;\n      const tax = parseFloat(tempTax.toFixed(2));\n      const total = subTotal + tax;\n      this.setState(() => {\n        return {\n          cartSubTotal: subTotal,\n          cartTax: tax,\n          cartTotal: total\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:3000/items').then(response => response.json()).then(result => {\n      this.setState(() => {\n        return {\n          products: result\n        };\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(ProductContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        handleDetail: this.handleDetail,\n        addToCart: this.addToCart,\n        openModal: this.openModal,\n        closeModal: this.closeModal,\n        increment: this.increment,\n        decrement: this.decrement,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart,\n        createOrder: this.createOrder,\n        createOrderedItems: this.createOrder\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer };","map":{"version":3,"sources":["/Users/carlosbarrera/mod4-flatiron/mod4_project/frontend/src/context.js"],"names":["React","Component","ProductContext","createContext","ProductProvider","state","products","detailProduct","cart","modalOpen","modalProduct","cartSubTotal","cartTax","cartTotal","searchTerm","handleChange","e","setState","target","value","setProducts","forEach","item","singleItem","getItem","id","product","find","handleDetail","addToCart","tempProducts","index","indexOf","inCart","count","price","total","addTotals","openModal","closeModal","increment","tempCart","selectedProduct","decrement","removeItem","filter","removedProduct","clearCart","createOrderedItems","createOrder","localStorage","token","fetch","method","headers","body","JSON","stringify","order_total","ordered_items","then","window","location","replace","alert","subTotal","map","tempTax","tax","parseFloat","toFixed","componentDidMount","response","json","result","render","props","children","ProductConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\n\nconst ProductContext = React.createContext();\n   \n\nclass ProductProvider extends Component {\n    state={\n        products: [],\n        detailProduct: 0,\n        cart: [],\n        modalOpen: false,\n        modalProduct: 0,\n        cartSubTotal: 0,\n        cartTax: 0,\n        cartTotal: 0,\n        searchTerm: ''\n    }\n\n    componentDidMount() {\n        fetch('http://localhost:3000/items')\n        .then(response => response.json())\n        .then(result => {\n            this.setState(()=>{\n                return {products: result}\n            })\n        })\n    }\n\n    state = {\n        searchTerm: ''\n    }\n\n\n    handleChange = (e) => {\n        this.setState({\n            searchTerm: e.target.value\n        })\n    }\n\n    setProducts = () => {\n\n        let products = [];\n        this.state.products.forEach( item => {\n            const singleItem = {...item};\n            products = [...products, singleItem]\n        })\n        this.setState(()=> {\n            return {products: products}\n        })\n    }\n\n    getItem = (id) => {\n        const product = this.state.products.find( item => item.id === id);\n            return product\n    }\n\n    handleDetail = (id) => {\n        const product = this.getItem(id)\n        this.setState(() => {\n            return {detailProduct: product}\n        })\n    }\n\n    addToCart = (id) => {\n        let tempProducts = [...this.state.products];\n        const index = tempProducts.indexOf(this.getItem(id));\n        const product = tempProducts[index];\n        product.inCart = true\n        product.count = 1;\n        const price = product.price;\n        product.total = price;\n        this.setState(\n            () => {\n            return {    \n                products: tempProducts,\n                cart: [...this.state.cart, product] \n                }\n            },\n            () => {\n                this.addTotals()\n                }\n        )\n    }\n    \n    openModal = (id) => {\n        const product = this.getItem(id);\n        this.setState(()=>{\n            return {\n                modalProduct: product,\n                modalOpen: true\n            }\n        })\n    }\n\n    closeModal = () => {\n        this.setState(()=> {\n            return {\n                modalOpen: false\n            }\n        })\n    }\n\n    increment = (id) => {\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item=> item.id === id)\n        const index = tempCart.indexOf(selectedProduct)\n        const product = tempCart[index];\n        product.count = product.count + 1\n        product.total = product.count * product.price\n        this.setState(() => {\n            return{\n                cart: [...tempCart]\n            }\n        }, \n        ()=> {\n            this.addTotals()\n            }\n        )\n    }\n\n    decrement = (id) => {\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item=> item.id === id)\n        const index = tempCart.indexOf(selectedProduct)\n        const product = tempCart[index];\n        product.count = product.count - 1;\n\n        if(product.count === 0){\n            this.removeItem(id)\n        }\n        else{\n            product.total = product.count * product.price;\n            this.setState(() => {\n                return{\n                    cart: [...tempCart]\n                }\n            }, \n            ()=> {\n                this.addTotals()\n                }\n            )\n        }\n    }\n\n    removeItem = (id) => {\n        let tempProducts = [...this.state.products];\n        let tempCart = [...this.state.cart];\n        tempCart = tempCart.filter(item => item.id !== id );\n        const index = tempProducts.indexOf(this.getItem(id))\n        let removedProduct = tempProducts[index];\n        removedProduct.inCart = false;\n        removedProduct.count = 0;\n        removedProduct.total = 0;\n        this.setState(\n            ()=>{\n            return {\n                cart:[...tempCart],\n                products:[...tempProducts]\n\n            }\n        }, () => {\n            this.addTotals()\n        })\n\n    }\n\n    clearCart = () => {\n        this.setState(()=> {\n            return {\n                cart: []\n            }\n        }, ()=>{\n            this.setProducts();\n            this.addTotals();\n        })\n    }\n\n    createOrderedItems = () => {}\n\n\n    createOrder = (cartTotal, cart) => {\n        if(localStorage.token && localStorage.token !== \"undefined\"){\n        fetch('http://localhost:3000/orders/create', {\n            method: 'POST',\n            headers: {\n                'Content-Type':'application/json',\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\n            },\n            body: JSON.stringify({\n              order_total: cartTotal,\n              ordered_items: cart\n            })\n\n        })\n        .then(window.location.replace('/'))\n        .then(alert(\"You placed an order!\"))\n    }\n    else{\n        window.alert(\"Please Log In\")\n        window.location = '/login'\n        }\n}\n\n    addTotals = () => {\n        let subTotal = 0;\n        this.state.cart.map(item => (subTotal += item.total))\n        const tempTax = subTotal * 0.1;\n        const tax = parseFloat(tempTax.toFixed(2))\n        const total = subTotal + tax\n        this.setState(()=> {\n            return {\n                cartSubTotal: subTotal,\n                cartTax: tax,\n                cartTotal: total\n            }\n        })\n    }\n\n    render() {\n        return (\n            <ProductContext.Provider value={{\n                ...this.state,\n                handleDetail: this.handleDetail,\n                addToCart: this.addToCart,\n                openModal: this.openModal,\n                closeModal: this.closeModal,\n                increment: this.increment,\n                decrement: this.decrement,\n                removeItem: this.removeItem,\n                clearCart: this.clearCart,\n                createOrder: this.createOrder,\n                createOrderedItems: this.createOrder\n            }}>\n                {this.props.children}\n            </ProductContext.Provider>\n        )\n    }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\n\nexport { ProductProvider, ProductConsumer }\n"]},"metadata":{},"sourceType":"module"}